#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
var app = require('../app');
var debug = require('debug')('usde-backend:server');
var http = require('http');
// var socket = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

//  var server = http.createServer(app);
// //  const sio = require('socket.io')
// //  const io = sio(server);

// // io = socket(server);

// // require('../socket/socket')(io);


// const sio = require('socket.io')
// // const server = http.createServer(app).listen(port)
// const io = sio(server);

// //Initiliasing the socket connection

// io.sockets.on("connection", socket => {
//   let room = "";

//   //Sending to all clients in the room except the sender
//   socket.on("message", message => socket.broadcast.to(room).emit('message'))
//   socket.on("find", () => {

//     //Getting the url when the socket is initialised ie. someone connects 
//     const url = socket.request.headers.referer.split("/")
//     //Getting the unique id of that room or call
//     room = url[url.length - 1];

//     //Checking if we already have a room
//     const sr = io.sockets.adapter.rooms[room]

//     if(sr === undefined){
//       //No room with this name found, so create it

//       //Creating the room
//       socket.join(room)
//       socket.emit("create");

//     } else if(sr.length === 1){
//       // if the room already exists

//       socket.emit('join')
//     } else {

//       //Stopping users to join if the number of users is greater than 2
//       socket.emit('full', room)
//     }

//   } )


// //Authentication for someone trying to enter a room
// socket.on("auth", data => {
//   console.log({data});
//   data.sid = socket.id;

//   //Sending to all clients in room except the sender
//   socket.broadcast.to(room).emit("approve", data)
// })

// //Accept a request
// socket.on("accept", id => {
//   console.log({
//     "Accept request id": id
//   })


// console.log({
//     "io.sockets.connected[id]": io.sockets.connected[id]
//   })

//   io.sockets.connected[id].join(room);

//   //Sending to all the clients in the room, including the sender

//   io.in(room).emit("bridge")


// })

// //Reject request

// socket.on("reject", () => {
//   socket.emit('full')
// })

// //Leave request

// socket.on("leave", () => {
//   socket.broadcast.to(room).emit("hangup");
//   //Leave the room
//   socket.leave(room)
// })

// })




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}